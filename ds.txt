TW1
#include <stdio.h>


int *findMax(int *arr, int size);
void reverseArray(int *arr, int size);
int *searchElement(int *arr, int size, int element);

int main() {
    int N;
    printf("Enter the size of the array: ");
    scanf("%d", &N);

    int arr[N];
    printf("Enter %d elements:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }

  
    printf("Array elements using pointers:\n");
    for (int i = 0; i < N; i++) {
        printf("%d ", *(arr + i));
    }
    printf("\n");

    
    int *maxPtr = findMax(arr, N);
    printf("Maximum element in the array: %d\n", *maxPtr);

   
    reverseArray(arr, N);
    printf("Array after reversing:\n");
    for (int i = 0; i < N; i++) {
        printf("%d ", *(arr + i));
    }
    printf("\n");

    
    int searchElementValue;
    printf("Enter the element you want to search for: ");
    scanf("%d", &searchElementValue);
    int *searchPtr = searchElement(arr, N, searchElementValue);
    if (searchPtr != NULL) {
        printf("Element found at address: %p\n", (void *)searchPtr);
    } else {
        printf("Element not found\n");
    }

    return 0;
}


int *findMax(int *arr, int size) {
    int *maxPtr = arr;
    for (int i = 1; i < size; i++) {
        if (*(arr + i) > *maxPtr) {
            maxPtr = arr + i;
        }
    }
    return maxPtr;
}


void reverseArray(int *arr, int size) {
    int *start = arr;
    int *end = arr + size - 1;
    while (start < end) {
        int temp = *start;
        *start = *end;
        *end = temp;
        start++;
        end--;
    }
}


int *searchElement(int *arr, int size, int element) {
    for (int i = 0; i < size; i++) {
        if (*(arr + i) == element) {
            return arr + i;
        }
    }
    return NULL; // If element not found
}


------------------------------------------------------------------------------------------------------------------------------------------------------------

TW2
#include <stdio.h>
#include <string.h>


struct Student {
    char name[50];
    int cetRank;
    char branch[20];
};


void input(struct Student students[], int n)
{
    
    for (int i = 0; i < n; ++i) {
        printf("Enter details for student %d:\n", i + 1);
        printf("Name: ");
        scanf("%s", students[i].name);
        printf("CET Rank: ");
        scanf("%d", &students[i].cetRank);
        printf("Branch: ");
        scanf("%s", students[i].branch);
    }
}

void segregateStudents(struct Student students[], int n, char targetBranch[])
{
    printf("\nStudents opting for %s branch:\n", targetBranch);
    for (int i = 0; i < n; ++i) {
        if (strcasecmp(students[i].branch, targetBranch) == 0) {
            printf("Name: %s, CET Rank: %d\n", students[i].name, students[i].cetRank);
        }
    }
}

int main() {
   
    int n;
    printf("Enter the number of students: ");
    scanf("%d", &n);

   
    struct Student students[n];
     input(students,n);
    
    
    segregateStudents(students, n, "CSE");
    segregateStudents(students, n, "EE");
    segregateStudents(students, n, "Mech");

    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

TW3
#include <stdio.h>
#include <ctype.h>
#define MAX 20


char stack[MAX];
int top=-1;

void push(char);
char pop();
int priority(char);

int main() {
    char exp[20], *e, x;
    // reading the infix expression
    printf("\nEnter the expression: ");
    scanf("%s", exp);

    
    e = exp;
    printf("\nThe equivalent postfix expression is: ");
    while (*e != '\0') {
        if (isalnum(*e)) { // operand
            printf("%c", *e);
        } else if (*e == '(') {
            push(*e);
        } else if (*e == ')') {
            while ((x = pop()) != '(')
                printf("%c", x);
        } else { // operator
            while (priority(stack[top]) >= priority(*e))
                printf("%c", pop());
            push(*e);
        }
        e++;
    } // end of while

    // pop the remaining operators and print
    while (top != -1)
        printf("%c", pop());
    return 0;
}


void push(char item) {
    if (top == MAX - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack[++top] = item;
}


char pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack[top--];
}


int priority(char symbol) {
    switch(symbol) {
        case '(':
            return 0;
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        default:
            return -1;
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------

TW4
#include <stdio.h>

#define MAX_SIZE 100


struct Queue {
    int items[MAX_SIZE];
    int front;
    int rear;
};


void initQueue(struct Queue *q) {
    q->front = -1;
    q->rear = -1;
}


int isEmpty(struct Queue *q) {
    return q->front == -1;
}


int isFull(struct Queue *q) {
    return (q->rear == MAX_SIZE - 1) || (q->front == (q->rear + 1) % MAX_SIZE);
}


void enqueue(struct Queue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (isEmpty(q)) {
        q->front = 0;
        q->rear = 0;
    } else {
        q->rear = (q->rear + 1) % MAX_SIZE;
    }
    q->items[q->rear] = value;
}


int dequeue(struct Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear) {
        q->front = -1;
        q->rear = -1;
    } else {
        q->front = (q->front + 1) % MAX_SIZE;
    }
    return value;
}


int front(struct Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty. No front element.\n");
        return -1;
    }
    return q->items[q->front];
}


void display(struct Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty. Nothing to display.\n");
        return;
    }
    printf("Queue elements: ");
    int i = q->front;
    while (i != q->rear) {
        printf("%d ", q->items[i]);
        i = (i + 1) % MAX_SIZE;
    }
    printf("%d\n", q->items[q->rear]);
}

int main() {
    struct Queue q;
    initQueue(&q);

    int choice, value;
    do {
        printf("\nFIFO Queue Menu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display front\n");
        printf("4. Display queue\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to enqueue: ");
                scanf("%d", &value);
                enqueue(&q, value);
                break;
            case 2:
                value = dequeue(&q);
                if (value != -1)
                    printf("Dequeued element: %d\n", value);
                break;
            case 3:
                value = front(&q);
                if (value != -1)
                    printf("Front element: %d\n", value);
                break;
            case 4:
                display(&q);
                break;
            case 0:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 0);

    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

TW5
#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
}NODE;

NODE* add(NODE*, int);
void disp(NODE*);
int search(NODE*, int);

int main()
{
    
    NODE *head=NULL;
    int opt, item;
    while(1)
    {
        printf("\n1: Add item    2: Disp Warehouse    ");
        printf("3: Search item   4: exit");
        printf("\nEnter your option: ");
        scanf("%d", &opt);
        switch(opt)
        {
            case 1: printf("\nEnter item ID to add to warehouse: ");
                    scanf("%d", &item);
                    head=add(head, item);
                    break;
            case 2: disp(head);   break;
            case 3: printf("\nEnter the item ID to search: ");
                    scanf("%d", &item);
                    if(search(head, item))
                       printf("\nItem %d is present in the warehouse", item);
                    else
                       printf("\nItem %d is NOT present in the warehouse", item);
                    break;
            case 4: exit(0);
        }
    }
    return 0;
}


NODE* add(NODE* head, int item)
{
    NODE *prev, *curr;
    NODE *newnode=(NODE*)malloc(sizeof(NODE));
    if(newnode==NULL)
    {
        printf("\nMalloc failure");
        exit(1);
    }
    newnode->data=item;
    newnode->next=NULL;
    // Case i - List is empty
    if(head==NULL)
        head=newnode;
    else // Case ii - adding the smallest item
        if(item < head->data)
        {
              newnode->next = head;
              head = newnode;
        }
    else // Case iii
    {
        prev=head;
        curr=head->next;
        while(curr && item > curr->data)
        {
            prev=prev->next;
            curr=curr->next;
        }//end of while
        newnode->next=curr;
        prev->next=newnode;

    }//end of else
    return head;
}


void disp(NODE *head)
{
    if(head==NULL)
    {
        printf("\nWarehouse is empty");
        return;
    }
    printf("\nThe warehouse items are: ");
    while(head)
    {
        printf("%d    ", head->data);
        head=head->next;
    }
}


int search(NODE* head, int item)
{
    if(head==NULL)
    {
        printf("\nWarehouse is empty");
        return 0;
    }
    while(head && (item > head->data))
          head=head->next;

    if(head==NULL)
        return 0;

    if(item==head->data)
        return 1;
    else
        return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

TW6

#include <stdio.h>
#include <stdlib.h>


struct node
{
    int info;
    struct node *prev, *next;
};
struct node* start = NULL;


void traverse()
{
    // List is empty
    if (start == NULL) 
    {
        printf("\nList is empty\n");
        return;
    }
    
    struct node* temp;
    temp = start;
    while (temp != NULL)
    {
        printf("Data = %d\n", temp->info);
        temp = temp->next;
    }
}


void insertAtFront()
{
    int data;
    struct node* temp;
    temp = (struct node*)malloc(sizeof(struct node));
    printf("\nEnter number to be inserted: ");
    scanf("%d", &data);
    temp->info = data;
    temp->prev = NULL;

    // Pointer of temp will be assigned to start
    temp->next = start;
    start = temp;
}


void insertAtEnd()
{
    int data;
    struct node *temp, *trav;
    temp = (struct node*)malloc(sizeof(struct node));
    temp->prev = NULL;
    temp->next = NULL;
    printf("\nEnter number to be inserted: ");
    scanf("%d", &data);
    temp->info = data;
    temp->next = NULL;
    trav = start;

    // If start is NULL
    if (start == NULL) 
    {
        start = temp;
    }

    // Changes Links
    else
    {
        while (trav->next != NULL)
            trav = trav->next;
        temp->prev = trav;
        trav->next = temp;
    }
}

void search()
{
    int x, count = 0;
    struct node *temp2;
    temp2 = start;

    if (temp2 == NULL)
    {
        printf("\n Error : List empty to search for data");
        return;
    }
    printf("\n Enter value to search : ");
    scanf("%d", &x);
    while (temp2 != NULL)
    {
        if (temp2->info == x)
        {
            printf("\n Data found in %d position",count + 1);
            return;
        }
        else
             temp2 = temp2->next;
            count++;
    }
    printf("\n Error : %d not found in list", x);
}



void sortList() 
{  
    struct node *current = NULL, *index = NULL, *head;  
    int temp;
    head=start;
    //Check whether list is empty  
    if(head == NULL) 
    {  
        return;  
    }  
    else 
    {  
        //Current will point to head  
        for(current = head; current->next != NULL; current = current->next) 
        {  
            //Index will point to node next to current  
            for(index = current->next; index != NULL; index = index->next)
            {  
                //If current's data is greater than index's data, swap the data of current and index  
                if(current->info > index->info) 
                {  
                    temp = current->info;  
                    current->info = index->info;  
                    index->info = temp;  
                }  
            }  
        }  
    }  
} 

 int main()
{
    int choice;
    while (1) {

        printf("\n\t 1  To see list\n");
        printf("\t 2  For insertion at"
               " starting\n");
        printf("\t 3  For insertion at"
               " end\n");
        printf("\t 4 To search for a data\n");
        printf("\t 5 To sort the list\n");
        printf("\t 6 To exit\n");
        printf("\nEnter Choice :\n");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            traverse();
            break;
        case 2:
            insertAtFront();
            break;
        case 3:
            insertAtEnd();
            break;
        case 4:
            search();
            break;
        case 5:
            sortList();
            break;
        case 6:
            exit(1);
            break;
        default:
            printf("Incorrect Choice. Try Again \n");
            continue;
        }
    }
    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

TW7
#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};


struct Node* createNode(int rollno) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = rollno;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insertNode(struct Node* root, int rollno) {
    if (root == NULL) {
        return createNode(rollno);
    }

    if (rollno < root->data) {
        root->left = insertNode(root->left, rollno);
    } else if (rollno > root->data) {
        root->right = insertNode(root->right, rollno);
    }

    return root;
}


struct Node* searchNode(struct Node* root, int rollno) {
    if (root == NULL || root->data == rollno) {
        return root;
    }

    if (rollno < root->data) {
        return searchNode(root->left, rollno);
    }

    return searchNode(root->right, rollno);
}


void inOrderTraversal(struct Node* root) {
    if (root != NULL) {
        inOrderTraversal(root->left);
        printf("%d ", root->data);
        inOrderTraversal(root->right);
    }
}


void preOrderTraversal(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preOrderTraversal(root->left);
        preOrderTraversal(root->right);
    }
}


void postOrderTraversal(struct Node* root) {
    if (root != NULL) {
        postOrderTraversal(root->left);
        postOrderTraversal(root->right);
        printf("%d ", root->data);
    }
}


int main() {
    struct Node* root = NULL;
    int choice, rollno;
    struct Node* result;

    do {
        printf("\nBinary Search Tree Operations:\n");
        printf("1. Insert a rollno\n");
        printf("2. Search for a rollno\n");
        printf("3. In-order traversal of the BST\n");
        printf("4. Pre-order traversal of BST \n");
        printf("5. Post-order traversal of BST \n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the rollno to be inserted: ");
                scanf("%d", &rollno);
                root = insertNode(root, rollno);
                break;

            case 2:
                printf("Enter the rollno to be searched: ");
                scanf("%d", &rollno);
                result = searchNode(root, rollno);
                if (result != NULL) 
                         {
                    printf("Node with rollno %d found in the BST.\n",                  
                                   rollno);
                         }
              else {
                    printf("Node with rollno %d not found in the BST.\n",  
                     rollno);
                    }
                     break;




            case 3:
                printf("In-order traversal: ");
                inOrderTraversal(root);
                printf("\n");
                break;

            case 4:
                printf("Pre-order traversal: ");
                preOrderTraversal(root);
                printf("\n");
                break;

            case 5:
                printf("Post-order traversal: ");
                postOrderTraversal(root);
                printf("\n");
                break;

            case 0:
                printf("Exiting the program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

    } while (choice != 0);

    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------

TW8
#include <stdio.h>
#include <string.h>

#define TABLE_SIZE 10


struct Customer {
    int custid;
    char custname[50];
    char custphno[15];
};


struct Customer hashTable[TABLE_SIZE];


int hashFunction(int custid) {
    return custid % TABLE_SIZE;
}


void insertCustomer(int custid, const char *custname, const char *custphno) {
    int index = hashFunction(custid);

    
    while (hashTable[index].custid != -1) {
        index = (index + 1) % TABLE_SIZE;
    }

    
    hashTable[index].custid = custid;
    strcpy(hashTable[index].custname, custname);
    strcpy(hashTable[index].custphno, custphno);
}


void searchCustomer(int custid) {
    int index = hashFunction(custid);
    int originalIndex = index;

    
    while (hashTable[index].custid != -1) {
        if (hashTable[index].custid == custid) {
            printf("Customer found:\n");
            printf("Customer ID: %d\n", hashTable[index].custid);
            printf("Customer Name: %s\n", hashTable[index].custname);
            printf("Customer Phone Number: %s\n", hashTable[index].custphno);
            return;
        }
        index = (index + 1) % TABLE_SIZE;
        if (index == originalIndex) {
            // Customer not found
            printf("Customer not found for ID %d\n", custid);
            return;
        }
    }

    // Customer not found
    printf("Customer not found for ID %d\n", custid);
}


void displayRecords() {
    printf("Customer Records:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable[i].custid != -1) {
            printf("Index %d: (ID: %d, Name: %s, Phone: %s)\n", i, hashTable[i].custid, hashTable[i].custname, hashTable[i].custphno);
        }
    }
}

int main() {
    int data;
    
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i].custid = -1;
    }

   
    insertCustomer(101, "Ajay", "9562385665");
    insertCustomer(205, "Pooja", "9874523610");
    insertCustomer(312, "Swayam", "7895463210");

   
    displayRecords();

   
   printf("\n Enter Item to search:");
   scanf("%d",&data);
   
   searchCustomer(data);

    return 0;
}
